generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Area {
  area_id       Int       @id @default(autoincrement())
  megateam_id   Int
  area_name     String    @db.VarChar(255)
  area_location String    @db.VarChar(255)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  Megateam      Megateam  @relation(fields: [megateam_id], references: [megateam_id], onDelete: NoAction, map: "Areas_ibfk_1")
  Team          Team[]

  @@index([megateam_id], map: "megateam_id")
}

model Megateam {
  megateam_id          Int      @id @default(autoincrement())
  megateam_name        String   @db.VarChar(255)
  megateam_description String?  @db.VarChar(255)
  createdAt            DateTime @default(now())
  updatedAt            DateTime @updatedAt
  Area                 Area[]
}

model Point {
  point_id         Int      @id @default(autoincrement())
  value            Int
  origin_qrcode_id Int?
  redeemer_id      Int
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt
  QRCode           QRCode?  @relation(fields: [origin_qrcode_id], references: [qrcode_id], map: "Points_ibfk_1")
  User             User     @relation(fields: [redeemer_id], references: [user_id], onDelete: Cascade, map: "Points_ibfk_2")

  @@index([origin_qrcode_id], map: "origin_qrcode_id")
  @@index([redeemer_id], map: "redeemer_id")
}

model QRCode {
  qrcode_id      Int              @id @default(autoincrement())
  name           String           @db.VarChar(255)
  category       QRCodes_category @default(workshop)
  payload        String           @db.VarChar(255)
  points_value   Int
  max_uses       Int?
  state          Boolean
  start_time     DateTime         @db.DateTime(0)
  expiry_time    DateTime         @db.DateTime(0)
  creator_id     Int
  challenge_rank Int?             @unique(map: "challenge_rank")
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt
  Points         Point[]          
  User           User             @relation(fields: [creator_id], references: [user_id], onDelete: Cascade, map: "QRCodes_ibfk_1")

  @@index([creator_id], map: "creator_id")
}


model Team {
  team_id            Int      @id @default(autoincrement())
  join_code          Int      @unique(map: "join_code")
  discord_channel_id String?  @db.VarChar(255)
  team_name          String   @unique(map: "team_name") @db.VarChar(255)
  area_id            Int?
  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt
  Area               Area?    @relation(fields: [area_id], references: [area_id], map: "Teams_ibfk_1")
  User               User[]

  @@index([area_id], map: "area_id")
}

model User {
  user_id                Int        @id @default(autoincrement())
  team_id                Int?
  email                  String     @unique(map: "email") @db.VarChar(255)
  preferred_name         String     @db.VarChar(255)
  role                   Users_role @default(hacker)
  initially_logged_in_at DateTime?  @db.DateTime(0)
  last_logged_in_at      DateTime?  @db.DateTime(0)
  createdAt              DateTime   @default(now())
  updatedAt              DateTime   @updatedAt
  Points                 Point[]    
  QRCodes                QRCode[]   
  Team                   Team?      @relation(fields: [team_id], references: [team_id], map: "Users_ibfk_1")

  @@index([team_id], map: "team_id")
}

enum QRCodes_category {
  workshop
  sponsor
  challenge
  preset
}

enum Users_role {
  hacker
  sponsor
  volunteer
  admin
}
